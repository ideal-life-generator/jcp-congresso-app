// Generated by CoffeeScript 1.7.1
(function() {
  var atea;

  atea = angular.module('atea');

  atea.factory('getDataTest', [
    '$resource', function($resource) {
      return $resource("http://188.226.184.59/congressomulti/api/:resource/:id", {}, {
        noCache: {
          method: "GET",
          cache: false
        },
        save: {
          method: "POST",
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
          }
        },
        put: {
          method: "PUT",
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
          }
        }
      });
    }
  ]);

  atea.provider("local", function() {
    this.$get = function($q, $http, message) {
      var defer, local;
      defer = $q.defer();
      local = {};
      $http({
        method: "GET",
        url: "js/i18n/" + this.lang + ".json"
      }).success(function(data) {
        local.polyglot = new Polyglot({
          locale: this.lang,
          phrases: data
        });
        local.local = data;
        local.dyna = {};
        return defer.resolve(local);
      }).error(function() {
        return message.warningAfter("Some error at localize in factory.js service with provider name 'local'");
      });
      return defer.promise;
    };
    return this;
  });

  atea.config(function(localProvider) {
    return localProvider.lang = navigator.language === "hu" ? "hu" : "en";
  });

  atea.factory('message', [
    '$timeout', '$q', function($timeout, $q) {
      var data, duration, elementDuration, timeAfter;
      elementDuration = parseFloat(window.getComputedStyle(document.querySelector('message')).transitionDuration);
      duration = elementDuration * 1000;
      timeAfter = 300;
      return data = {
        close: function() {
          var defer, promise;
          defer = $q.defer();
          if (data.makeFastClose) {
            data.afterFn();
            data.makeFastClose = false;
            data.fastClose = true;
          }
          if (data.makeClose) {
            data["class"] = 'display';
            $timeout(function() {
              delete data["class"];
              delete data.message;
              return defer.resolve();
            }, duration + timeAfter);
          }
          if (data.fastTClose) {
            delete data["class"];
          }
          return promise = defer.promise;
        },
        wait: function(message) {
          data.start = (new Date).getTime();
          data.message = message;
          return data["class"] = 'wait';
        },
        warning: function(message) {
          data.makeClose = true;
          data.message = message;
          return data["class"] = 'wait';
        },
        warningClose: function(message, afterFn) {
          data.warning(message);
          return $timeout(function() {
            data.fastTClose = true;
            data.close();
            return data.fastTClose = false;
          }, duration + timeAfter * 5);
        },
        warningAfter: function(message) {
          var defer, equal;
          defer = $q.defer();
          equal = (new Date).getTime() - data.start;
          if (data.start && equal < duration + timeAfter) {
            $timeout(function() {
              data.warning(message);
              return defer.resolve();
            }, duration + timeAfter - equal);
          } else {
            data.warning(message);
            defer.resolve();
          }
          return defer.promise;
        },
        success: function(message, afterFn) {
          var promise;
          promise = data.warningAfter(message);
          if (afterFn) {
            data.afterFn = afterFn;
            return promise.then(function() {
              data.makeFastClose = true;
              if (!data.fastClose) {
                return $timeout(function() {
                  var promiseCloser;
                  if (!data.fastClose) {
                    data.makeFastClose = false;
                    promiseCloser = data.close();
                    promiseCloser.then(function() {
                      return afterFn();
                    });
                    return data.fastClose = false;
                  }
                }, duration + timeAfter * 5);
              }
            });
          }
        }
      };
    }
  ]);

  atea.run(['message', '$timeout', function(message, $timeout) {}]);

  atea.factory('client', [
    '$location', 'Auth', 'getDataTest', '$q', 'storage', function($location, Auth, getDataTest, $q, storage) {
      var self;
      self = this;
      this.path = $location.$$path;
      this.lastPath = this.path;
      this.navigator = /[W-w]indows [P-p]hone/.test(window.navigator.userAgent) ? 'Windows Phone' : void 0;
      this.animationClass = (function() {
        if (self.navigator === 'Windows Phone') {
          return {
            content: {
              left: '',
              right: ''
            },
            logo: 'ease',
            leftMenu: 'ease'
          };
        } else {
          return {
            content: {
              left: 'hard-left',
              right: 'hard-right'
            },
            logo: 'hard',
            leftMenu: 'hard'
          };
        }
      })();
      this.user = {
        detail: (function() {
          var user;
          if (storage.getObject('user')) {
            user = storage.getObject('user');
            Auth.setCredentials(user.email, user.password);
            return user;
          } else {
            return null;
          }
        })(),
        login: function(username, password) {
          var defer;
          defer = $q.defer();
          Auth.setCredentials(username, password);
          getDataTest.noCache({
            resource: "login"
          }, function(result) {
            var data;
            data = result.data;
            self.user.detail = data;
            data.password = password;
            storage.setObject('user', data);
            return defer.resolve(data);
          }, function(error) {
            return defer.reject(error);
          });
          return defer.promise;
        },
        logOut: function() {
          storage["delete"]('user');
          Auth.clearCredentials();
          return self.detail = null;
        }
      };
      return this;
    }
  ]);

  atea.factory('storage', [
    '$window', function($window) {
      this.setObject = function(name, object) {
        return $window.localStorage.setItem(name, $window.JSON.stringify(object));
      };
      this.getObject = function(name) {
        return $window.JSON.parse($window.localStorage.getItem(name));
      };
      this["delete"] = function(name) {
        return $window.localStorage.removeItem(name);
      };
      return this;
    }
  ]);

  atea.factory('connection', [
    function() {
      var connection;
      return connection = {
        status: false,
        error: function(f) {
          connection.status = true;
          connection.loading = false;
          return connection.handler = f;
        }
      };
    }
  ]);

  atea.factory('connectionTest', [
    'getDataTest', function(getDataTest) {
      var connection;
      return connection = {
        makeLoad: function(property) {
          var f, prop, value;
          for (prop in property) {
            value = property[prop];
            connection[prop] = property[prop];
          }
          property.scope.loader = true;
          property.scope.loading = true;
          property.scope.update = true;
          f = function() {
            var data;
            property.scope.warning = false;
            data = property.data ? property.data : {};
            return getDataTest[connection.type](connection.params, data, function(result) {
              data = result.data;
              property.handler(data);
              property.scope.loading = false;
              property.scope.loader = false;
              return property.scope.update = false;
            }, function(error) {
              if (!property.scope.f) {
                property.scope.f = f;
              }
              property.scope.loading = false;
              property.scope.warning = true;
              return property.scope.update = false;
            });
          };
          return f();
        }
      };
    }
  ]);

}).call(this);
